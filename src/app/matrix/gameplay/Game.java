package app.matrix.gameplay;import javax.swing.JComponent;import java.awt.*;/** * @author emma-campbell * @version 1.0 * @since 2019-02-18 * * The overall function of the game class is to combine score mechanisms with game function mechanisms. */public class Game extends JComponent {    private Matrix board = new Matrix(375, 470);    private int score;    public Game() {        this.start();        this.add(board);    }    /**     * Places two random pieces on the board and initializes the score to zero     */    private void start() {        for (int i=0; i <= 1; i++) {            board.placeRandom();        }        score = 0;    }    /**     * Clear the board, reinitialize the score to zero and place two new random pieces     *     * @returns void     */    private void restart() {        board.clear();        start();    }    /**     * Adds point from the previous move to the total score     *     * @param points integer representing the points from the previous move     * @return void     */    private void updateScore(int points) {        score += points;    }    /**     * if swipeUp() is a valid move, game will move the matrix up     *     * @return void     */    public void swipeUp() {        board.up();        board.placeRandom();        board.print();    }    /**     * if swipeDown() is a valid move, game moves the matrix, adds a new block, and updates score     *     * @return void     */    public void swipeDown() {        board.down();        board.placeRandom();        board.print();    }    /**     * if swipeLeft() is a valid move, game moves the matrix, adds a new block, and updates score     *     * @return void     */    public void swipeLeft() {        board.left();        board.placeRandom();        board.print();    }    /**     * if swipeRight() is a valid move, game will move the matrix, add a random tile, and update the score     *     * @return void     */    public void swipeRight() {        board.right();        board.placeRandom();        board.print();    }    @Override    public void paintComponent(Graphics g) {        super.paintComponent(g);        g.setColor(new Color(213, 202, 188));        g.fillRect(0,0, 500, 700);        int y = this.getHeight() - 550;        int x = this.getWidth() - (int)((7.0/8.0) * this.getWidth());        board.drawBoard(g, x, y);    }}