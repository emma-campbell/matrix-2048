package app.matrix.gameplay;import app.matrix.views.infoPanel.TopPanel;import javax.swing.*;import java.awt.*;/** * @author emma-campbell * @version 1.0.0 * @since 2019-02-26 * * The overall function of the game class is to combine score mechanisms with game function mechanisms. */public class Game extends JPanel {    private TopPanel top = new TopPanel();    private Matrix board = new Matrix(375, 470);    /**     * Constructior     */    public Game() {        this.start();        setLayout(new BorderLayout());        this.add(top, BorderLayout.NORTH);        this.add(board, BorderLayout.SOUTH);    }    /**     * Places two random pieces on the board and initializes the score to zero     */    private void start() {        for (int i=0; i <= 1; i++) {            board.placeRandom();        }    }    /**     * Clear the board, reinitialize the score to zero and place two new random pieces     */    private void restart() {        board.clear();        top.reset();        start();    }    /**     * if it is a valid move, game will move the matrix up     */    public void swipeUp() {        int p = board.up();        top.addPoints(p);        if (board.countNull() != 0) { //if there are empty tiles            if (board.getValid()) { //if the move was valid                board.placeRandom(); //place random tile            }        }        else if (board.hasWon()) { //if the user has won            int cont = JOptionPane.showOptionDialog(null, "Congrats! You Won! Wanna play again?",                    "You Win!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);            if (cont == JOptionPane.YES_OPTION) {                restart();            }            else {                System.exit(0);            }        }        else {            if (!board.movesRemaining()) {                int cont = JOptionPane.showOptionDialog(null, "You Lost! Try again?",                        "You Lost!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);                if (cont == JOptionPane.YES_OPTION) {                    restart();                }                else {                    System.exit(0);                }            }        }    }    /**     * if this is a valid move, game moves the matrix, adds a new block, and updates score     */    public void swipeDown() {        int p = board.down();        top.addPoints(p);        if (board.countNull() != 0) { //no empty tiles            if (board.getValid()) { //move was valid                board.placeRandom(); //add random            }        }        else if (board.hasWon()) { //if the user has won            int cont = JOptionPane.showOptionDialog(null, "Congrats! You Won! Wanna play again?",                    "You Win!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);            if (cont == JOptionPane.YES_OPTION) {                restart();            } else {                System.exit(0);            }        }        else {            if (!board.movesRemaining()) { //yser                int cont = JOptionPane.showOptionDialog(null, "You Lost! Try again?",                        "You Lost!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);                if (cont == JOptionPane.YES_OPTION) {                    restart();                }                else {                    System.exit(0);                }            }        }    }    /**     * if valid move, game moves the matrix, adds a new block, and updates score     */    public void swipeLeft() {        int p = board.left();        top.addPoints(p);        if (board.countNull() != 0) {            if (board.getValid()) {                board.placeRandom();            }        }        else if (board.hasWon()) { //if the user has won            int cont = JOptionPane.showOptionDialog(null, "Congrats! You Won! Wanna play again?",                    "You Win!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);            if (cont == JOptionPane.YES_OPTION) {                restart();            } else {                System.exit(0);            }        }        else {            if (!board.movesRemaining()) {                int cont = JOptionPane.showOptionDialog(null, "You Lost! Try again?",                        "You Lost!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);                if (cont == JOptionPane.YES_OPTION) {                    restart();                }                else {                    System.exit(0);                }            }        }    }    /**     * if swipeRight() is a valid move, game will move the matrix, add a random tile, and update the score     *     * @return void     */    public void swipeRight() {        int p = board.right();        top.addPoints(p);        if (board.countNull() != 0) {            if (board.getValid()) {                board.placeRandom();                return;            }        }        else if (board.hasWon()) { //if the user has won            int cont = JOptionPane.showOptionDialog(null, "Congrats! You Won! Wanna play again?",                    "You Win!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);            if (cont == JOptionPane.YES_OPTION) {                restart();            } else {                System.exit(0);            }        }        else {            if (!board.movesRemaining()) {                int cont = JOptionPane.showOptionDialog(null, "You Lost! Try again?",                        "You Lost!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);                if (cont == JOptionPane.YES_OPTION) {                    restart();                }                else {                    System.exit(0);                }            }        }    }    @Override    public void paintComponent(Graphics g) {        super.paintComponent(g);        g.setColor(new Color(213, 202, 188));        g.fillRect(0,0, 500, 700);        int y = this.getHeight() - 550;        int x = this.getWidth() - (int)((7.0/8.0) * this.getWidth());        board.drawBoard(g, x, y);    }}